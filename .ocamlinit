#require "ppx_deriving.show"
#directory "lib"
#mod_use "state.ml";;
#mod_use "types.ml";;
#mod_use "names.ml";;
#mod_use "graph.ml";;
open Types 
module Float_Graph = Graph.Make_Graph(Float_t)

let _ = Float_Graph.build (fun () ->
  let open Float_Graph in
  let a = value_of 4.0 in
  let b = value_of 1.0 in
  let c = (const 2.0) * a + a * b in
  backward c;
  let ga = grad a in
  let gb = grad b in
  print_endline @@ show ga;
  Printf.printf "Grad a: %f\n" (realize ga);
  print_endline @@ show gb;
  Printf.printf "Grad b: %f\n" (realize gb);
)

